apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  namespace: {{ .Values.common.namespace }}
spec:
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
  selector:
    matchLabels:
      app: todoapp
  template:
    metadata:
      labels:
        app: todoapp
    spec:
      serviceAccountName: {{ .Chart.Name }}-secrets-reader
      containers:
      - name: todoapp
        image: {{ .Values.common.image }}{{":"}}{{ .Values.common.image_tag }}
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: secrets-volume
          mountPath: "/app/secrets"
          readOnly: true
        - name: config-volume
          mountPath: "/app/configs"
          readOnly: true
        resources:
          requests:
            memory: {{ .Values.resources.requests.memory | quote }}
            cpu: {{ .Values.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.resources.limits.memory | quote }}
            cpu: {{ .Values.resources.limits.cpu | quote }}
        env:
        - name: PYTHONUNBUFFERED
          valueFrom:
            configMapKeyRef:
              name: {{ .Chart.Name}}-configmap
              key: PYTHONUNBUFFERED
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: SECRET_KEY
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_NAME
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_PASSWORD
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: {{ .Chart.Name }}-secret
              key: DB_HOST
        ports:
        - containerPort: 8080
        livenessProbe:
          httpGet:
            path: api/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: api/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Chart.Name }}-pvc
      - name: secrets-volume
        secret:
          secretName: {{ .Chart.Name }}-secret
      - name: config-volume
        configMap:
          name: {{ .Chart.Name }}-configmap
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: {{ .Values.nodeAffinityParameters.weight }}
            preference:
              matchExpressions:
              - key: {{ .Values.nodeAffinityParameters.key }}
                operator: {{ .Values.nodeAffinityParameters.operator }}
                values:
                - {{ .Values.nodeAffinityParameters.values }}